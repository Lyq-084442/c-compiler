{decl_list}{;}{decl}{decl_list}{|}{;}{type_spec}{id}{{push_id}}{var_or_func}{|}{struct_decl}{|}{';'}{;}{'('}{{func_begin}}{params}{')'}{func_follow}{{func_end}}{|}{var_def_follow}{var_def_list_follow}{;}{';'}{|}{code_block}{;}{'struct'}{id}{{push_id}}{'{'}{{struct_begin}}{def_list}{'}'}{';'}{{struct_end}}{;}{exp}{|}{string}{{push_str}}{;}{int_type}{|}{float_type}{|}{char_type}{|}{'void'}{{void}}{|}{'struct'}{id}{{push_id}}{{struct_var}}{;}{signed_int_type}{|}{'unsigned'}{unsigned_int_type}{;}{'short'}{redundant_int}{{int16}}{|}{'int'}{{int32}}{|}{'long'}{signed_int_32_64}{;}{'long'}{{int64}}{redundant_int}{|}{redundant_int}{{int32}}{;}{'short'}{redundant_int}{{uint16}}{|}{'int'}{{uint32}}{|}{'long'}{unsigned_int_32_64}{;}{'long'}{redundant_int}{{uint64}}{|}{redundant_int}{{uint32}}{;}{'int'}{|}{;}{'float'}{{float32}}{|}{'double'}{{float64}}{;}{'char'}{{char8}}{|}{'unsigned'}{'char'}{{uchar8}}{;}{param_list}{|}{;}{param}{param_follow}{;}{','}{param}{param_follow}{|}{;}{type_spec}{id}{{push_id}}{param_suffix}{;}{'['}{']'}{{param_array}}{|}{{param_var}}{;}{'{'}{{code_block}}{def_list}{code_list}{'}'}{{code_block_end}}{;}{var_def}{def_list}{|}{;}{type_spec}{var_def_list}{;}{id}{{push_id}}{var_def_follow}{var_def_list_follow}{;}{','}{id}{{push_id}}{var_def_follow}{var_def_list_follow}{|}{';'}{{var_def_list_end}}{;}{'['}{int_const}{{def_array}}{']'}{array_init}{{def_array_end}}{|}{'='}{exp}{{var_init_end}}{|}{{var_def_end}}{;}{'='}{array_init_follow}{|}{;}{'{'}{{init_list_begin}}{initializer_list}{'}'}{{init_list_end}}{|}{string}{{push_str}}{{arr_init_str}}{;}{initializer}{initializer_follow}{|}{;}{','}{initializer}{initializer_follow}{|}{;}{exp}{{init_list_item}}{;}{code}{code_list}{|}{;}{normal_stmt}{|}{branch_stmt}{|}{iteration_stmt}{|}{return_stmt}{|}{code_block}{;}{';'}{|}{exp_or_str}{';'}{{pop_top}}{|}{'break'}{';'}{{break}}{|}{'continue'}{';'}{{continue}}{;}{'('}{{call_func_begin}}{call_params}{')'}{{call_func_end}}{;}{call_param_list}{|}{;}{exp_or_str}{{call_func_push}}{call_param_follow}{;}{','}{exp_or_str}{{call_func_push}}{call_param_follow}{|}{;}{if_stmt}{|}{switch_stmt}{;}{'switch'}{{switch_begin}}{'('}{exp}{')'}{'{'}{case_list}{default}{'}'}{{switch_end}}{;}{int_const}{{push_int}}{|}{char_const}{{push_char}}{;}{case}{case_list}{|}{;}{'case'}{i_c}{{case_begin}}{':'}{code_list}{{case_end}}{;}{'default'}{':'}{code}{;}{'if'}{{if_begin}}{'('}{exp_or_str}{{if_check}}{')'}{code}{{if_end}}{else_stmt}{{else_end}}{;}{'else'}{code}{|}{;}{'while'}{{while_begin}}{'('}{exp_or_str}{{while_check}}{')'}{code}{{while_end}}{|}{'for'}{'('}{for_exp}{{for_init}}{';'}{for_exp}{{for_check}}{';'}{for_exp}{{for_suf}}{')'}{code}{{for_end}}{;}{exp_or_str}{;}{'return'}{return_follow}{;}{';'}{{return}}{|}{exp_or_str}{{return@}}{';'}{;}{term_assign}{exp_assign}{;}{'='}{term_assign}{{@=@}}{exp_assign}{|}{'+='}{term_assign}{{@+=@}}{exp_assign}{|}{'-='}{term_assign}{{@-=@}}{exp_assign}{|}{'*='}{term_assign}{{@*=@}}{exp_assign}{|}{'/='}{term_assign}{{@/=@}}{exp_assign}{|}{'%='}{term_assign}{{@%=@}}{exp_assign}{|}{'<<='}{term_assign}{{@<<=@}}{exp_assign}{|}{'>>='}{term_assign}{{@>>=@}}{exp_assign}{|}{'&='}{term_assign}{{@&=@}}{exp_assign}{|}{'^='}{term_assign}{{@^=@}}{exp_assign}{|}{'|='}{term_assign}{{@|=@}}{exp_assign}{|}{;}{term_log_or}{exp_log_or}{;}{'||'}{term_log_or}{{@||@}}{exp_log_or}{|}{;}{term_log_and}{exp_log_and}{;}{'&&'}{term_log_and}{{@&&@}}{exp_log_and}{|}{;}{term_bit_or}{exp_bit_or}{;}{'|'}{term_bit_or}{{@|@}}{exp_bit_or}{|}{;}{term_bit_xor}{exp_bit_xor}{;}{'^'}{term_bit_xor}{{@^@}}{exp_bit_xor}{|}{;}{term_bit_and}{exp_bit_and}{;}{'&'}{term_bit_and}{{@&@}}{exp_bit_and}{|}{;}{term_eq}{exp_eq}{;}{'=='}{term_eq}{{@==@}}{exp_eq}{|}{'!='}{term_eq}{{@!=@}}{exp_eq}{|}{;}{term_cmp}{exp_cmp}{;}{'>='}{term_cmp}{{@>=@}}{exp_cmp}{|}{'<='}{term_cmp}{{@<=@}}{exp_cmp}{|}{'>'}{term_cmp}{{@>@}}{exp_cmp}{|}{'<'}{term_cmp}{{@<@}}{exp_cmp}{|}{;}{term_shift}{exp_shift}{;}{'<<'}{term_shift}{{@<<@}}{exp_shift}{|}{'>>'}{term_shift}{{@>>@}}{exp_shift}{|}{;}{term_add}{exp_add}{;}{'+'}{term_add}{{@+@}}{exp_add}{|}{'-'}{term_add}{{@-@}}{exp_add}{|}{;}{term_mul}{exp_mul}{;}{'*'}{term_mul}{{@*@}}{exp_mul}{|}{'/'}{term_mul}{{@/@}}{exp_mul}{|}{'%'}{term_mul}{{@%@}}{exp_mul}{|}{;}{term_prefix}{;}{term_suffix}{|}{'++'}{term_prefix}{{++@}}{|}{'--'}{term_prefix}{{--@}}{|}{'!'}{term_prefix}{{!@}}{|}{'~'}{term_prefix}{{~@}}{|}{'+'}{term_prefix}{{+@}}{|}{'-'}{term_prefix}{{-@}}{;}{factors}{inc_or_dec}{;}{'++'}{{@++}}{|}{'--'}{{@--}}{|}{;}{int_const}{{push_int}}{|}{float_const}{{push_float}}{|}{char_const}{{push_char}}{|}{id}{{push_id}}{id_suffix}{|}{'('}{exp}{')'}{;}{'['}{exp}{']'}{{@[@]}}{|}{call_func}{|}{'.'}{id}{{push_id}}{{@.@}}{|}{;}{123123rfewgrgwe} 
{10} {8} {1} {2} {3} {4} {5} {20} {0} {21} 

{1} {2} {0} 
{A} {a} {b} {c} {f} {g} {h} {fuck} {xa} {fuck_func} {parama} {paramb} {paramc} {d} {suck} {s} {main} {D} {didi} {ret} 

keyword	: 13 { tokstruct }
identifier	: 0 { A }
delimiter	: 228 { lbrace }
keyword	: 5 { tokint }
identifier	: 1 { a }
delimiter	: 247 { comma }
identifier	: 2 { b }
delimiter	: 247 { comma }
identifier	: 3 { c }
delimiter	: 225 { semicolon }
keyword	: 4 { tokchar }
identifier	: 4 { f }
delimiter	: 247 { comma }
identifier	: 5 { g }
delimiter	: 247 { comma }
identifier	: 6 { h }
delimiter	: 225 { semicolon }
keyword	: 9 { toklong }
keyword	: 9 { toklong }
identifier	: 7 { fuck }
delimiter	: 225 { semicolon }
keyword	: 4 { tokchar }
identifier	: 8 { xa }
delimiter	: 230 { lbracket }
int_literal	: 0 { 10 }
delimiter	: 231 { rbracket }
delimiter	: 225 { semicolon }
delimiter	: 229 { rbrace }
delimiter	: 225 { semicolon }
keyword	: 5 { tokint }
identifier	: 9 { fuck_func }
delimiter	: 232 { lparenthesis }
keyword	: 5 { tokint }
identifier	: 10 { parama }
delimiter	: 247 { comma }
keyword	: 5 { tokint }
identifier	: 11 { paramb }
delimiter	: 247 { comma }
keyword	: 5 { tokint }
identifier	: 12 { paramc }
delimiter	: 233 { rparenthesis }
delimiter	: 228 { lbrace }
keyword	: 5 { tokint }
identifier	: 13 { d }
delimiter	: 230 { lbracket }
int_literal	: 1 { 8 }
delimiter	: 231 { rbracket }
delimiter	: 246 { assign }
delimiter	: 228 { lbrace }
int_literal	: 2 { 1 }
delimiter	: 247 { comma }
int_literal	: 3 { 2 }
delimiter	: 247 { comma }
int_literal	: 4 { 3 }
delimiter	: 247 { comma }
int_literal	: 5 { 4 }
delimiter	: 247 { comma }
int_literal	: 5 { 4 }
delimiter	: 237 { div }
int_literal	: 6 { 5 }
delimiter	: 229 { rbrace }
delimiter	: 225 { semicolon }
keyword	: 4 { tokchar }
identifier	: 14 { suck }
delimiter	: 230 { lbracket }
int_literal	: 7 { 20 }
delimiter	: 231 { rbracket }
delimiter	: 246 { assign }
string_literal	: 0 { 123123rfewgrgwe }
delimiter	: 225 { semicolon }
keyword	: 23 { tokswitch }
delimiter	: 232 { lparenthesis }
identifier	: 14 { suck }
delimiter	: 230 { lbracket }
int_literal	: 8 { 0 }
delimiter	: 231 { rbracket }
delimiter	: 233 { rparenthesis }
delimiter	: 228 { lbrace }
keyword	: 24 { tokcase }
char_literal	: 0 { 1 }
delimiter	: 226 { colon }
identifier	: 7 { fuck }
delimiter	: 232 { lparenthesis }
identifier	: 14 { suck }
delimiter	: 230 { lbracket }
int_literal	: 2 { 1 }
delimiter	: 231 { rbracket }
delimiter	: 247 { comma }
identifier	: 7 { fuck }
delimiter	: 232 { lparenthesis }
int_literal	: 2 { 1 }
delimiter	: 247 { comma }
int_literal	: 3 { 2 }
delimiter	: 247 { comma }
identifier	: 14 { suck }
delimiter	: 230 { lbracket }
int_literal	: 3 { 2 }
delimiter	: 231 { rbracket }
delimiter	: 233 { rparenthesis }
delimiter	: 247 { comma }
identifier	: 13 { d }
delimiter	: 230 { lbracket }
int_literal	: 5 { 4 }
delimiter	: 231 { rbracket }
delimiter	: 233 { rparenthesis }
delimiter	: 225 { semicolon }
keyword	: 26 { tokbreak }
delimiter	: 225 { semicolon }
keyword	: 24 { tokcase }
char_literal	: 1 { 2 }
delimiter	: 226 { colon }
identifier	: 13 { d }
delimiter	: 230 { lbracket }
int_literal	: 4 { 3 }
delimiter	: 231 { rbracket }
delimiter	: 246 { assign }
int_literal	: 6 { 5 }
delimiter	: 225 { semicolon }
keyword	: 25 { tokdefault }
delimiter	: 226 { colon }
keyword	: 26 { tokbreak }
delimiter	: 225 { semicolon }
delimiter	: 229 { rbrace }
keyword	: 21 { tokreturn }
identifier	: 10 { parama }
delimiter	: 234 { add }
identifier	: 11 { paramb }
delimiter	: 234 { add }
identifier	: 12 { paramc }
delimiter	: 225 { semicolon }
delimiter	: 229 { rbrace }
keyword	: 5 { tokint }
identifier	: 2 { b }
delimiter	: 225 { semicolon }
keyword	: 8 { tokshort }
keyword	: 5 { tokint }
identifier	: 15 { s }
delimiter	: 225 { semicolon }
keyword	: 5 { tokint }
identifier	: 16 { main }
delimiter	: 232 { lparenthesis }
delimiter	: 233 { rparenthesis }
delimiter	: 228 { lbrace }
keyword	: 5 { tokint }
identifier	: 1 { a }
delimiter	: 225 { semicolon }
keyword	: 5 { tokint }
identifier	: 2 { b }
delimiter	: 246 { assign }
int_literal	: 6 { 5 }
delimiter	: 247 { comma }
identifier	: 3 { c }
delimiter	: 247 { comma }
identifier	: 17 { D }
delimiter	: 246 { assign }
int_literal	: 0 { 10 }
delimiter	: 225 { semicolon }
keyword	: 13 { tokstruct }
identifier	: 0 { A }
identifier	: 18 { didi }
delimiter	: 225 { semicolon }
identifier	: 18 { didi }
delimiter	: 220 { point }
identifier	: 7 { fuck }
delimiter	: 246 { assign }
int_literal	: 6 { 5 }
delimiter	: 225 { semicolon }
identifier	: 18 { didi }
delimiter	: 220 { point }
identifier	: 4 { f }
delimiter	: 209 { orass }
identifier	: 19 { ret }
delimiter	: 232 { lparenthesis }
identifier	: 18 { didi }
delimiter	: 220 { point }
identifier	: 3 { c }
delimiter	: 247 { comma }
identifier	: 18 { didi }
delimiter	: 220 { point }
identifier	: 2 { b }
delimiter	: 233 { rparenthesis }
delimiter	: 234 { add }
int_literal	: 6 { 5 }
delimiter	: 241 { band }
identifier	: 1 { a }
delimiter	: 213 { lor }
delimiter	: 232 { lparenthesis }
identifier	: 17 { D }
delimiter	: 235 { sub }
int_literal	: 2 { 1 }
delimiter	: 218 { shl }
int_literal	: 9 { 21 }
delimiter	: 233 { rparenthesis }
delimiter	: 225 { semicolon }
keyword	: 16 { tokif }
delimiter	: 232 { lparenthesis }
identifier	: 1 { a }
delimiter	: 217 { gequal }
identifier	: 18 { didi }
delimiter	: 220 { point }
identifier	: 4 { f }
delimiter	: 233 { rparenthesis }
identifier	: 1 { a }
delimiter	: 246 { assign }
char_literal	: 2 { 0 }
delimiter	: 225 { semicolon }
keyword	: 17 { tokelse }
keyword	: 16 { tokif }
delimiter	: 232 { lparenthesis }
identifier	: 1 { a }
delimiter	: 212 { equal }
delimiter	: 232 { lparenthesis }
identifier	: 18 { didi }
delimiter	: 220 { point }
identifier	: 1 { a }
delimiter	: 234 { add }
int_literal	: 2 { 1 }
delimiter	: 233 { rparenthesis }
delimiter	: 233 { rparenthesis }
delimiter	: 228 { lbrace }
keyword	: 20 { tokwhile }
delimiter	: 232 { lparenthesis }
identifier	: 1 { a }
delimiter	: 212 { equal }
identifier	: 2 { b }
delimiter	: 233 { rparenthesis }
identifier	: 1 { a }
delimiter	: 200 { inc }
delimiter	: 225 { semicolon }
keyword	: 19 { tokfor }
delimiter	: 232 { lparenthesis }
identifier	: 1 { a }
delimiter	: 246 { assign }
int_literal	: 5 { 4 }
delimiter	: 225 { semicolon }
identifier	: 1 { a }
delimiter	: 244 { greater }
int_literal	: 1 { 8 }
delimiter	: 225 { semicolon }
delimiter	: 201 { dec }
identifier	: 1 { a }
delimiter	: 233 { rparenthesis }
delimiter	: 228 { lbrace }
identifier	: 18 { didi }
delimiter	: 220 { point }
identifier	: 7 { fuck }
delimiter	: 202 { addass }
identifier	: 1 { a }
delimiter	: 225 { semicolon }
delimiter	: 229 { rbrace }
delimiter	: 229 { rbrace }
keyword	: 17 { tokelse }
delimiter	: 228 { lbrace }
keyword	: 5 { tokint }
identifier	: 2 { b }
delimiter	: 246 { assign }
identifier	: 18 { didi }
delimiter	: 220 { point }
identifier	: 7 { fuck }
delimiter	: 225 { semicolon }
delimiter	: 229 { rbrace }
keyword	: 21 { tokreturn }
int_literal	: 8 { 0 }
delimiter	: 225 { semicolon }
delimiter	: 229 { rbrace }
[[ GEN QUAT -- structdef	:A
[[ GEN QUAT -- newvar 	:a,int32, [ {@False} ] 
[[ GEN QUAT -- newvar 	:b,int32, [ {@False} ] 
[[ GEN QUAT -- newvar 	:c,int32, [ {@False} ] 
[[ GEN QUAT -- newvar 	:f,char8, [ {@False} ] 
[[ GEN QUAT -- newvar 	:g,char8, [ {@False} ] 
[[ GEN QUAT -- newvar 	:h,char8, [ {@False} ] 
[[ GEN QUAT -- newvar 	:fuck,int64, [ {@False} ] 
[[ GEN QUAT -- newvar 	:xa,char8, [ 10 ] 
[[ GEN QUAT -- structend	:A
[[ GEN QUAT -- func 	:fuck_func,int32
[[ GEN QUAT -- funcparam 	:parama,int32, [ 0 ] 
[[ GEN QUAT -- funcparam 	:paramb,int32, [ 0 ] 
[[ GEN QUAT -- funcparam 	:paramc,int32, [ 0 ] 
[[ GEN QUAT -- cblock	:-- {
[[ GEN QUAT -- newvar 	:d,int32, [ 8 ] 
[[ GEN QUAT -- initlst	:tmp_0
[[ GEN QUAT -- initlstitem	:tmp_0
[[ GEN QUAT -- initlstitem	:tmp_0
[[ GEN QUAT -- initlstitem	:tmp_0
[[ GEN QUAT -- initlstitem	:tmp_0
[[ GEN QUAT -- div	:4,5,tmp_1
[[ GEN QUAT -- initlstitem	:tmp_0
[[ GEN QUAT -- initlstend	:tmp_0
[[ GEN QUAT -- assign	:d,tmp_0,init
[[ GEN QUAT -- newvar 	:suck,char8, [ 20 ] 
[[ GEN QUAT -- assign	:suck,123123rfewgrgwe,init
[[ GEN QUAT -- arrayval	:suck,0,tmp_2
[[ GEN QUAT -- sub	:49,tmp_2,tmp_3
[[ GEN QUAT -- btrue 	:case_end{1} ,tmp_3
[[ GEN QUAT -- call	:fuck
[[ GEN QUAT -- arrayval	:suck,1,tmp_4
[[ GEN QUAT -- push 	:tmp_4
[[ GEN QUAT -- call	:fuck
[[ GEN QUAT -- push 	:1
[[ GEN QUAT -- push 	:2
[[ GEN QUAT -- arrayval	:suck,2,tmp_5
[[ GEN QUAT -- push 	:tmp_5
[[ GEN QUAT -- callend	:tmp_6
[[ GEN QUAT -- push 	:tmp_6
[[ GEN QUAT -- arrayval	:d,4,tmp_7
[[ GEN QUAT -- push 	:tmp_7
[[ GEN QUAT -- callend	:tmp_8
[[ GEN QUAT -- jmp	:switch_end{0}
[[ GEN QUAT -- label 	:case_end{1}
[[ GEN QUAT -- sub	:50,tmp_2,tmp_9
[[ GEN QUAT -- btrue 	:case_end{2} ,tmp_9
[[ GEN QUAT -- arrayval	:d,3,tmp_10
[[ GEN QUAT -- assign	:tmp_10,5,normal
[[ GEN QUAT -- label 	:case_end{2}
[[ GEN QUAT -- jmp	:switch_end{0}
[[ GEN QUAT -- label 	:switch_end{0}
[[ GEN QUAT -- add	:parama,paramb,tmp_11
[[ GEN QUAT -- add	:tmp_11,paramc,tmp_12
[[ GEN QUAT -- retval	:tmp_12
[[ GEN QUAT -- cend	:-- }
[[ GEN QUAT -- funcend	:fuck_func
[[ GEN QUAT -- newvar 	:b,int32, [ {@False} ] 
[[ GEN QUAT -- newvar 	:s,int16, [ {@False} ] 
[[ GEN QUAT -- func 	:main,int32
[[ GEN QUAT -- cblock	:-- {
[[ GEN QUAT -- newvar 	:a,int32, [ {@False} ] 
[[ GEN QUAT -- newvar 	:b,int32, [ tokstruct ] 
[[ GEN QUAT -- assign	:b,5,init
[[ GEN QUAT -- newvar 	:c,int32, [ {@False} ] 
[[ GEN QUAT -- newvar 	:D,int32, [ tokstruct ] 
[[ GEN QUAT -- assign	:D,10,init
[[ GEN QUAT -- newvar 	:didi,{@struct}A, [ {@False} ] 
[[ GEN QUAT -- structval 	:didi,fuck,tmp_13
[[ GEN QUAT -- assign	:tmp_13,5,normal
[[ GEN QUAT -- structval 	:didi,f,tmp_14
[[ GEN QUAT -- call	:ret
[[ GEN QUAT -- structval 	:didi,c,tmp_15
[[ GEN QUAT -- push 	:tmp_15
[[ GEN QUAT -- structval 	:didi,b,tmp_16
[[ GEN QUAT -- push 	:tmp_16
[[ GEN QUAT -- callend	:tmp_17
[[ GEN QUAT -- add	:tmp_17,5,tmp_18
[[ GEN QUAT -- band	:tmp_18,a,tmp_19
[[ GEN QUAT -- sub	:D,1,tmp_20
[[ GEN QUAT -- shl	:tmp_20,21,tmp_21
[[ GEN QUAT -- lor	:tmp_19,tmp_21,tmp_22
[[ GEN QUAT -- assign	:tmp_14,tmp_22,or
[[ GEN QUAT -- structval 	:didi,f,tmp_23
[[ GEN QUAT -- ge	:a,tmp_23,tmp_24
[[ GEN QUAT -- bfalse	:if_end{3} ,tmp_24
[[ GEN QUAT -- assign	:a,48,normal
[[ GEN QUAT -- jmp	:else_end{4}
[[ GEN QUAT -- label 	:if_end{3}
[[ GEN QUAT -- structval 	:didi,a,tmp_25
[[ GEN QUAT -- add	:tmp_25,1,tmp_26
[[ GEN QUAT -- e	:a,tmp_26,tmp_27
[[ GEN QUAT -- bfalse	:if_end{5} ,tmp_27
[[ GEN QUAT -- cblock	:-- {
[[ GEN QUAT -- label 	:loop_begin{7}
[[ GEN QUAT -- e	:a,b,tmp_28
[[ GEN QUAT -- bfalse	:loop_end{8} ,tmp_28
[[ GEN QUAT -- assign	:tmp_29,a,normal
[[ GEN QUAT -- inc 	:a,tokstruct
[[ GEN QUAT -- jmp	:loop_begin{7}
[[ GEN QUAT -- assign	:a,4,normal
[[ GEN QUAT -- jmp	:for_begin{12}
[[ GEN QUAT -- label 	:loop_begin{9}
[[ GEN QUAT -- g	:a,8,tmp_30
[[ GEN QUAT -- btrue 	:for_begin{12} ,tmp_30
[[ GEN QUAT -- bfalse	:loop_end{11} ,tmp_30
[[ GEN QUAT -- label 	:for_suf{10}
[[ GEN QUAT -- dec	:a,tokstruct
[[ GEN QUAT -- jmp	:loop_begin{9}
[[ GEN QUAT -- label 	:for_begin{12}
[[ GEN QUAT -- cblock	:-- {
[[ GEN QUAT -- structval 	:didi,fuck,tmp_31
[[ GEN QUAT -- assign	:tmp_31,a,add
[[ GEN QUAT -- cend	:-- }
[[ GEN QUAT -- jmp	:for_suf{10}
[[ GEN QUAT -- label 	:loop_end{11}
[[ GEN QUAT -- cend	:-- }
[[ GEN QUAT -- jmp	:else_end{6}
[[ GEN QUAT -- label 	:if_end{5}
[[ GEN QUAT -- cblock	:-- {
[[ GEN QUAT -- structval 	:didi,fuck,tmp_32
[[ GEN QUAT -- newvar 	:b,int32, [ tokstruct ] 
[[ GEN QUAT -- assign	:b,tmp_32,init
[[ GEN QUAT -- cend	:-- }
[[ GEN QUAT -- label 	:else_end{6}
[[ GEN QUAT -- label 	:else_end{6}
[[ GEN QUAT -- retval	:0
[[ GEN QUAT -- cend	:-- }
[[ GEN QUAT -- funcend	:a
PARSER RESULT1
MAX 91
structdef	:A
newvar 	:a,int32, [ {@False} ] 
newvar 	:b,int32, [ {@False} ] 
newvar 	:c,int32, [ {@False} ] 
newvar 	:f,char8, [ {@False} ] 
newvar 	:g,char8, [ {@False} ] 
newvar 	:h,char8, [ {@False} ] 
newvar 	:fuck,int64, [ {@False} ] 
newvar 	:xa,char8, [ 10 ] 
structend	:A
func 	:fuck_func,int32
funcparam 	:parama,int32, [ 0 ] 
funcparam 	:paramb,int32, [ 0 ] 
funcparam 	:paramc,int32, [ 0 ] 
cblock	:-- {
newvar 	:d,int32, [ 8 ] 
initlst	:tmp_0
initlstitem	:tmp_0
initlstitem	:tmp_0
initlstitem	:tmp_0
initlstitem	:tmp_0
div	:4,5,tmp_1
initlstitem	:tmp_0
initlstend	:tmp_0
assign	:d,tmp_0,init
newvar 	:suck,char8, [ 20 ] 
assign	:suck,123123rfewgrgwe,init
arrayval	:suck,0,tmp_2
sub	:49,tmp_2,tmp_3
btrue 	:case_end{1} ,tmp_3
call	:fuck
arrayval	:suck,1,tmp_4
push 	:tmp_4
call	:fuck
push 	:1
push 	:2
arrayval	:suck,2,tmp_5
push 	:tmp_5
callend	:tmp_6
push 	:tmp_6
arrayval	:d,4,tmp_7
push 	:tmp_7
callend	:tmp_8
jmp	:switch_end{0}
label 	:case_end{1}
sub	:50,tmp_2,tmp_9
btrue 	:case_end{2} ,tmp_9
arrayval	:d,3,tmp_10
assign	:tmp_10,5,normal
label 	:case_end{2}
jmp	:switch_end{0}
label 	:switch_end{0}
add	:parama,paramb,tmp_11
add	:tmp_11,paramc,tmp_12
retval	:tmp_12
cend	:-- }
funcend	:fuck_func
newvar 	:b,int32, [ {@False} ] 
newvar 	:s,int16, [ {@False} ] 
func 	:main,int32
cblock	:-- {
newvar 	:a,int32, [ {@False} ] 
newvar 	:b,int32, [ tokstruct ] 
assign	:b,5,init
newvar 	:c,int32, [ {@False} ] 
newvar 	:D,int32, [ tokstruct ] 
assign	:D,10,init
newvar 	:didi,{@struct}A, [ {@False} ] 
structval 	:didi,fuck,tmp_13
assign	:tmp_13,5,normal
structval 	:didi,f,tmp_14
call	:ret
structval 	:didi,c,tmp_15
push 	:tmp_15
structval 	:didi,b,tmp_16
push 	:tmp_16
callend	:tmp_17
add	:tmp_17,5,tmp_18
band	:tmp_18,a,tmp_19
sub	:D,1,tmp_20
shl	:tmp_20,21,tmp_21
lor	:tmp_19,tmp_21,tmp_22
assign	:tmp_14,tmp_22,or
structval 	:didi,f,tmp_23
ge	:a,tmp_23,tmp_24
bfalse	:if_end{3} ,tmp_24
assign	:a,48,normal
jmp	:else_end{4}
label 	:if_end{3}
structval 	:didi,a,tmp_25
add	:tmp_25,1,tmp_26
e	:a,tmp_26,tmp_27
bfalse	:if_end{5} ,tmp_27
cblock	:-- {
label 	:loop_begin{7}
e	:a,b,tmp_28
bfalse	:loop_end{8} ,tmp_28
assign	:tmp_29,a,normal
inc 	:a,tokstruct
jmp	:loop_begin{7}
assign	:a,4,normal
jmp	:for_begin{12}
label 	:loop_begin{9}
g	:a,8,tmp_30
btrue 	:for_begin{12} ,tmp_30
bfalse	:loop_end{11} ,tmp_30
label 	:for_suf{10}
dec	:a,tokstruct
jmp	:loop_begin{9}
label 	:for_begin{12}
cblock	:-- {
structval 	:didi,fuck,tmp_31
assign	:tmp_31,a,add
cend	:-- }
jmp	:for_suf{10}
label 	:loop_end{11}
cend	:-- }
jmp	:else_end{6}
label 	:if_end{5}
cblock	:-- {
structval 	:didi,fuck,tmp_32
newvar 	:b,int32, [ tokstruct ] 
assign	:b,tmp_32,init
cend	:-- }
label 	:else_end{6}
label 	:else_end{6}
retval	:0
cend	:-- }
funcend	:a
DONE
