{decl_list}{;}{decl}{decl_list}{|}{;}{type_spec}{id}{{push_id}}{var_or_func}{|}{struct_decl}{|}{';'}{;}{'('}{{func_begin}}{params}{')'}{func_follow}{{func_end}}{|}{var_def_follow}{var_def_list_follow}{;}{';'}{|}{code_block}{;}{'struct'}{id}{{push_id}}{'{'}{{struct_begin}}{def_list}{'}'}{';'}{{struct_end}}{;}{exp}{|}{string}{{push_str}}{;}{int_type}{|}{float_type}{|}{char_type}{|}{'void'}{{void}}{|}{'struct'}{id}{{push_id}}{{struct_var}}{;}{int16_type}{{int16}}{|}{uint16_type}{{uint16}}{|}{int32_type}{{int32}}{|}{uint32_type}{{uint32}}{|}{int64_type}{{int64}}{|}{uint64_type}{{uint64}}{;}{'short'}{;}{'unsigned'}{'short'}{;}{'int'}{|}{'long'}{|}{'long'}{'int'}{;}{'unsigned'}{'int'}{|}{'unsigned'}{|}{'unsigned'}{'long'}{;}{'long'}{'long'}{'int'}{|}{'long'}{'long'}{;}{'unsigned'}{'long'}{'long'}{|}{'unsigned'}{'long'}{'long'}{'int'}{;}{'float'}{{float32}}{|}{'double'}{{float64}}{;}{'char'}{{char8}}{|}{'unsigned'}{'char'}{{uchar8}}{;}{param_list}{|}{;}{param}{param_follow}{;}{','}{param}{param_follow}{|}{;}{type_spec}{id}{{push_id}}{param_suffix}{;}{'['}{']'}{{param_array}}{|}{{param_var}}{;}{'{'}{{code_block}}{def_list}{code_list}{'}'}{{code_block_end}}{;}{var_def}{def_list}{|}{;}{type_spec}{var_def_list}{;}{id}{{push_id}}{var_def_follow}{var_def_list_follow}{;}{','}{id}{{push_id}}{var_def_follow}{var_def_list_follow}{|}{';'}{{var_def_list_end}}{;}{'['}{int_const}{{def_array}}{']'}{array_init}{{def_array_end}}{|}{'='}{exp}{{var_init_end}}{|}{{var_def_end}}{;}{'='}{array_init_follow}{|}{;}{'{'}{{init_list_begin}}{initializer_list}{'}'}{{init_list_end}}{|}{string}{{push_str}}{{arr_init_str}}{;}{initializer}{initializer_follow}{|}{;}{','}{initializer}{initializer_follow}{|}{;}{exp}{{init_list_item}}{;}{code}{code_list}{|}{;}{normal_stmt}{|}{branch_stmt}{|}{iteration_stmt}{|}{return_stmt}{|}{code_block}{;}{';'}{|}{exp_or_str}{';'}{{pop_top}}{|}{'break'}{';'}{{break}}{|}{'continue'}{';'}{{continue}}{;}{'('}{call_params}{')'}{;}{call_param_list}{|}{;}{exp_or_str}{{call_func_push}}{call_param_follow}{;}{','}{exp_or_str}{{call_func_push}}{call_param_follow}{|}{;}{if_stmt}{|}{switch_stmt}{;}{'switch'}{{switch_begin}}{'('}{exp}{')'}{'{'}{case_list}{default}{'}'}{{switch_end}}{;}{int_const}{{push_int}}{|}{char_const}{{push_char}}{;}{case}{case_list}{|}{;}{'case'}{i_c}{{case_begin}}{':'}{code}{{case_end}}{;}{'default'}{':'}{code}{;}{'if'}{{if_begin}}{'('}{exp_or_str}{{if_check}}{')'}{code}{{if_end}}{else_stmt}{{else_end}}{;}{'else'}{else_follow}{code}{|}{;}{'while'}{{while_begin}}{'('}{exp_or_str}{{while_check}}{')'}{code}{{while_end}}{|}{'for'}{'('}{for_exp}{{for_init}}{';'}{for_exp}{{for_check}}{';'}{for_exp}{{for_suf}}{')'}{code}{{for_end}}{;}{exp_or_str}{;}{'return'}{return_follow}{;}{';'}{{return}}{|}{exp_or_str}{{return@}}{';'}{;}{term_assign}{exp_assign}{;}{'='}{term_assign}{{@=@}}{exp_assign}{|}{'+='}{term_assign}{{@+=@}}{exp_assign}{|}{'-='}{term_assign}{{@-=@}}{exp_assign}{|}{'*='}{term_assign}{{@*=@}}{exp_assign}{|}{'/='}{term_assign}{{@/=@}}{exp_assign}{|}{'%='}{term_assign}{{@%=@}}{exp_assign}{|}{'<<='}{term_assign}{{@<<=@}}{exp_assign}{|}{'>>='}{term_assign}{{@>>=@}}{exp_assign}{|}{'&='}{term_assign}{{@&=@}}{exp_assign}{|}{'^='}{term_assign}{{@^=@}}{exp_assign}{|}{'|='}{term_assign}{{@|=@}}{exp_assign}{|}{;}{term_log_or}{exp_log_or}{;}{'||'}{term_log_or}{{@||@}}{exp_log_or}{|}{;}{term_log_and}{exp_log_and}{;}{'&&'}{term_log_and}{{@&&@}}{exp_log_and}{|}{;}{term_bit_or}{exp_bit_or}{;}{'|'}{term_bit_or}{{@|@}}{exp_bit_or}{|}{;}{term_bit_xor}{exp_bit_xor}{;}{'^'}{term_bit_xor}{{@^@}}{exp_bit_xor}{|}{;}{term_bit_and}{exp_bit_and}{;}{'&'}{term_bit_and}{{@&@}}{exp_bit_and}{|}{;}{term_eq}{exp_eq}{;}{'=='}{term_eq}{{@==@}}{exp_eq}{|}{'!='}{term_eq}{{@!=@}}{exp_eq}{|}{;}{term_cmp}{exp_cmp}{;}{'>='}{term_cmp}{{@>=@}}{exp_cmp}{|}{'<='}{term_cmp}{{@<=@}}{exp_cmp}{|}{'>'}{term_cmp}{{@>@}}{exp_cmp}{|}{'<'}{term_cmp}{{@<@}}{exp_cmp}{|}{;}{term_shift}{exp_shift}{;}{'<<'}{term_shift}{{@<<@}}{exp_shift}{|}{'>>'}{term_shift}{{@>>@}}{exp_shift}{|}{;}{term_add}{exp_add}{;}{'+'}{term_add}{{@+@}}{exp_add}{|}{'-'}{term_add}{{@-@}}{exp_add}{|}{;}{term_mul}{exp_mul}{;}{'*'}{term_mul}{{@*@}}{exp_mul}{|}{'/'}{term_mul}{{@/@}}{exp_mul}{|}{'%'}{term_mul}{{@%@}}{exp_mul}{|}{;}{term_prefix}{;}{term_suffix}{|}{'++'}{term_prefix}{{++@}}{|}{'--'}{term_prefix}{{--@}}{|}{'!'}{term_prefix}{{!@}}{|}{'~'}{term_prefix}{{~@}}{|}{'+'}{term_prefix}{{+@}}{|}{'-'}{term_prefix}{{-@}}{;}{factors}{inc_or_dec}{;}{'++'}{{@++}}{|}{'--'}{{@--}}{|}{;}{int_const}{{push_int}}{|}{float_const}{{push_float}}{|}{char_const}{{push_char}}{|}{id}{{push_id}}{id_suffix}{|}{'('}{exp}{')'}{;}{'['}{exp}{']'}{{@[@]}}{|}{call_func}{{call_func}}{|}{'.'}{id}{{@.@}}{|}{;}
!! try prod program=>{decl_list}

!! try prod decl_list=>{decl}{decl_list}

!! try prod decl=>{type_spec}{id}{{push_id}}{var_or_func}

!! try prod type_spec=>{int_type}

!! try prod int_type=>{int32_type}{{int32}}

!! try prod int32_type=>{'int'}
 terminator ---CURRENT _STACK TOP___ 'int' _CURRENT_NOW tokint accept
call func {int32}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod var_or_func=>{'('}{{func_begin}}{params}{')'}{func_follow}{{func_end}}
 terminator ---CURRENT _STACK TOP___ '(' _CURRENT_NOW lparenthesis accept
call func {func_begin}

!! try prod params=>{param_list}

!! try prod param_list=>{param}{param_follow}

!! try prod param=>{type_spec}{id}{{push_id}}{param_suffix}

!! try prod type_spec=>{int_type}

!! try prod int_type=>{int32_type}{{int32}}

!! try prod int32_type=>{'int'}
 terminator ---CURRENT _STACK TOP___ 'int' _CURRENT_NOW tokint accept
call func {int32}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod param_suffix=>{{param_var}}
call func {param_var}

!! try prod param_follow=>{','}{param}{param_follow}
 terminator ---CURRENT _STACK TOP___ ',' _CURRENT_NOW comma accept

!! try prod param=>{type_spec}{id}{{push_id}}{param_suffix}

!! try prod type_spec=>{char_type}

!! try prod char_type=>{'char'}{{char8}}
 terminator ---CURRENT _STACK TOP___ 'char' _CURRENT_NOW tokchar accept
call func {char8}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod param_suffix=>{'['}{']'}{{param_array}}
 terminator ---CURRENT _STACK TOP___ '[' _CURRENT_NOW lbracket accept
 terminator ---CURRENT _STACK TOP___ ']' _CURRENT_NOW rbracket accept
call func {param_array}

!! try prod param_follow=>
 terminator ---CURRENT _STACK TOP___ ')' _CURRENT_NOW rparenthesis accept

!! try prod func_follow=>{code_block}

!! try prod code_block=>{'{'}{{code_block}}{def_list}{code_list}{'}'}{{code_block_end}}
 terminator ---CURRENT _STACK TOP___ '{' _CURRENT_NOW lbrace accept
call func {code_block}

!! try prod def_list=>

!! try prod code_list=>{code}{code_list}

!! try prod code=>{normal_stmt}

         reject [normal_stmt] with [tokreturn] - no possible way
!! try prod code=>{branch_stmt}

         reject [branch_stmt] with [tokreturn] - no possible way
!! try prod code=>{return_stmt}

!! try prod return_stmt=>{'return'}{return_follow}
 terminator ---CURRENT _STACK TOP___ 'return' _CURRENT_NOW tokreturn accept

!! try prod return_follow=>{exp_or_str}{{return@}}{';'}

!! try prod exp_or_str=>{exp}

!! try prod exp=>{term_assign}{exp_assign}

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{id}{{push_id}}{id_suffix}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod id_suffix=>{'['}{exp}{']'}{{@[@]}}
 terminator ---CURRENT _STACK TOP___ '[' _CURRENT_NOW lbracket accept

!! try prod exp=>{term_assign}{exp_assign}

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{id}{{push_id}}{id_suffix}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod id_suffix=>

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>

!! try prod exp_assign=>
 terminator ---CURRENT _STACK TOP___ ']' _CURRENT_NOW rbracket accept
call func {@[@]}

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>

!! try prod exp_assign=>
call func {return@}
 terminator ---CURRENT _STACK TOP___ ';' _CURRENT_NOW semicolon accept

!! try prod code_list=>
 terminator ---CURRENT _STACK TOP___ '}' _CURRENT_NOW rbrace accept
call func {code_block_end}
call func {func_end}

!! try prod decl_list=>{decl}{decl_list}

!! try prod decl=>{type_spec}{id}{{push_id}}{var_or_func}

!! try prod type_spec=>{int_type}

!! try prod int_type=>{int32_type}{{int32}}

!! try prod int32_type=>{'int'}
 terminator ---CURRENT _STACK TOP___ 'int' _CURRENT_NOW tokint accept
call func {int32}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod var_or_func=>{var_def_follow}{var_def_list_follow}

!! try prod var_def_follow=>{{var_def_end}}
call func {var_def_end}

!! try prod var_def_list_follow=>{';'}{{var_def_list_end}}
 terminator ---CURRENT _STACK TOP___ ';' _CURRENT_NOW semicolon accept
call func {var_def_list_end}

!! try prod decl_list=>{decl}{decl_list}

!! try prod decl=>{type_spec}{id}{{push_id}}{var_or_func}

!! try prod type_spec=>{int_type}

!! try prod int_type=>{int32_type}{{int32}}

!! try prod int32_type=>{'int'}
 terminator ---CURRENT _STACK TOP___ 'int' _CURRENT_NOW tokint accept
call func {int32}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod var_or_func=>{'('}{{func_begin}}{params}{')'}{func_follow}{{func_end}}
 terminator ---CURRENT _STACK TOP___ '(' _CURRENT_NOW lparenthesis accept
call func {func_begin}

!! try prod params=>{param_list}

!! try prod param_list=>{param}{param_follow}

         reject [param] with [rparenthesis] - no possible way
        -- reject [param_list] with [rparenthesis] -- all productions tried
!! try prod params=>
 terminator ---CURRENT _STACK TOP___ ')' _CURRENT_NOW rparenthesis accept

!! try prod func_follow=>{code_block}

!! try prod code_block=>{'{'}{{code_block}}{def_list}{code_list}{'}'}{{code_block_end}}
 terminator ---CURRENT _STACK TOP___ '{' _CURRENT_NOW lbrace accept
call func {code_block}

!! try prod def_list=>{var_def}{def_list}

!! try prod var_def=>{type_spec}{var_def_list}

!! try prod type_spec=>{int_type}

!! try prod int_type=>{int32_type}{{int32}}

!! try prod int32_type=>{'int'}
 terminator ---CURRENT _STACK TOP___ 'int' _CURRENT_NOW tokint accept
call func {int32}

!! try prod var_def_list=>{id}{{push_id}}{var_def_follow}{var_def_list_follow}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod var_def_follow=>{{var_def_end}}
call func {var_def_end}

!! try prod var_def_list_follow=>{';'}{{var_def_list_end}}
 terminator ---CURRENT _STACK TOP___ ';' _CURRENT_NOW semicolon accept
call func {var_def_list_end}

!! try prod def_list=>{var_def}{def_list}

!! try prod var_def=>{type_spec}{var_def_list}

!! try prod type_spec=>{int_type}

!! try prod int_type=>{int32_type}{{int32}}

!! try prod int32_type=>{'int'}
 terminator ---CURRENT _STACK TOP___ 'int' _CURRENT_NOW tokint accept
call func {int32}

!! try prod var_def_list=>{id}{{push_id}}{var_def_follow}{var_def_list_follow}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod var_def_follow=>{'='}{exp}{{var_init_end}}
 terminator ---CURRENT _STACK TOP___ '=' _CURRENT_NOW assign accept

!! try prod exp=>{term_assign}{exp_assign}

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{int_const}{{push_int}}
 terminator ---CURRENT _STACK TOP___ int_const _CURRENT_NOW int_literal accept
call func {push_int}

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>

!! try prod exp_assign=>
call func {var_init_end}

!! try prod var_def_list_follow=>{','}{id}{{push_id}}{var_def_follow}{var_def_list_follow}
 terminator ---CURRENT _STACK TOP___ ',' _CURRENT_NOW comma accept
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod var_def_follow=>{{var_def_end}}
call func {var_def_end}

!! try prod var_def_list_follow=>{','}{id}{{push_id}}{var_def_follow}{var_def_list_follow}
 terminator ---CURRENT _STACK TOP___ ',' _CURRENT_NOW comma accept
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod var_def_follow=>{'='}{exp}{{var_init_end}}
 terminator ---CURRENT _STACK TOP___ '=' _CURRENT_NOW assign accept

!! try prod exp=>{term_assign}{exp_assign}

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{int_const}{{push_int}}
 terminator ---CURRENT _STACK TOP___ int_const _CURRENT_NOW int_literal accept
call func {push_int}

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>

!! try prod exp_assign=>
call func {var_init_end}

!! try prod var_def_list_follow=>{';'}{{var_def_list_end}}
 terminator ---CURRENT _STACK TOP___ ';' _CURRENT_NOW semicolon accept
call func {var_def_list_end}

!! try prod def_list=>{var_def}{def_list}

!! try prod var_def=>{type_spec}{var_def_list}

!! try prod type_spec=>{'struct'}{id}{{push_id}}{{struct_var}}
 terminator ---CURRENT _STACK TOP___ 'struct' _CURRENT_NOW tokstruct accept
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}
call func {struct_var}

!! try prod var_def_list=>{id}{{push_id}}{var_def_follow}{var_def_list_follow}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod var_def_follow=>{{var_def_end}}
call func {var_def_end}

!! try prod var_def_list_follow=>{';'}{{var_def_list_end}}
 terminator ---CURRENT _STACK TOP___ ';' _CURRENT_NOW semicolon accept
call func {var_def_list_end}

!! try prod def_list=>

!! try prod code_list=>{code}{code_list}

!! try prod code=>{normal_stmt}

!! try prod normal_stmt=>{exp_or_str}{';'}{{pop_top}}

!! try prod exp_or_str=>{exp}

!! try prod exp=>{term_assign}{exp_assign}

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{id}{{push_id}}{id_suffix}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod id_suffix=>{'.'}{id}{{@.@}}
 terminator ---CURRENT _STACK TOP___ '.' _CURRENT_NOW point accept
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {@.@}

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>

!! try prod exp_assign=>{'='}{term_assign}{{@=@}}{exp_assign}
 terminator ---CURRENT _STACK TOP___ '=' _CURRENT_NOW assign accept

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{int_const}{{push_int}}
 terminator ---CURRENT _STACK TOP___ int_const _CURRENT_NOW int_literal accept
call func {push_int}

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>
call func {@=@}

!! try prod exp_assign=>
 terminator ---CURRENT _STACK TOP___ ';' _CURRENT_NOW semicolon accept
call func {pop_top}

!! try prod code_list=>{code}{code_list}

!! try prod code=>{normal_stmt}

!! try prod normal_stmt=>{exp_or_str}{';'}{{pop_top}}

!! try prod exp_or_str=>{exp}

!! try prod exp=>{term_assign}{exp_assign}

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{id}{{push_id}}{id_suffix}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod id_suffix=>{'.'}{id}{{@.@}}
 terminator ---CURRENT _STACK TOP___ '.' _CURRENT_NOW point accept
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {@.@}

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>

!! try prod exp_assign=>{'='}{term_assign}{{@=@}}{exp_assign}
 terminator ---CURRENT _STACK TOP___ '=' _CURRENT_NOW assign accept

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{id}{{push_id}}{id_suffix}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod id_suffix=>{call_func}{{call_func}}

!! try prod call_func=>{'('}{call_params}{')'}
 terminator ---CURRENT _STACK TOP___ '(' _CURRENT_NOW lparenthesis accept

!! try prod call_params=>{call_param_list}

!! try prod call_param_list=>{exp_or_str}{{call_func_push}}{call_param_follow}

!! try prod exp_or_str=>{exp}

!! try prod exp=>{term_assign}{exp_assign}

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{id}{{push_id}}{id_suffix}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod id_suffix=>{'.'}{id}{{@.@}}
 terminator ---CURRENT _STACK TOP___ '.' _CURRENT_NOW point accept
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {@.@}

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>

!! try prod exp_assign=>
call func {call_func_push}

!! try prod call_param_follow=>{','}{exp_or_str}{{call_func_push}}{call_param_follow}
 terminator ---CURRENT _STACK TOP___ ',' _CURRENT_NOW comma accept

!! try prod exp_or_str=>{exp}

!! try prod exp=>{term_assign}{exp_assign}

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{id}{{push_id}}{id_suffix}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod id_suffix=>{'.'}{id}{{@.@}}
 terminator ---CURRENT _STACK TOP___ '.' _CURRENT_NOW point accept
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {@.@}

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>

!! try prod exp_assign=>
call func {call_func_push}

!! try prod call_param_follow=>
 terminator ---CURRENT _STACK TOP___ ')' _CURRENT_NOW rparenthesis accept
call func {call_func}

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>{'+'}{term_add}{{@+@}}{exp_add}
 terminator ---CURRENT _STACK TOP___ '+' _CURRENT_NOW add accept

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{int_const}{{push_int}}
 terminator ---CURRENT _STACK TOP___ int_const _CURRENT_NOW int_literal accept
call func {push_int}

!! try prod inc_or_dec=>

!! try prod exp_mul=>
call func {@+@}

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>
call func {@=@}

!! try prod exp_assign=>
 terminator ---CURRENT _STACK TOP___ ';' _CURRENT_NOW semicolon accept
call func {pop_top}

!! try prod code_list=>{code}{code_list}

!! try prod code=>{normal_stmt}

         reject [normal_stmt] with [tokif] - no possible way
!! try prod code=>{branch_stmt}

!! try prod branch_stmt=>{if_stmt}

!! try prod if_stmt=>{'if'}{{if_begin}}{'('}{exp_or_str}{{if_check}}{')'}{code}{{if_end}}{else_stmt}{{else_end}}
 terminator ---CURRENT _STACK TOP___ 'if' _CURRENT_NOW tokif accept
call func {if_begin}
 terminator ---CURRENT _STACK TOP___ '(' _CURRENT_NOW lparenthesis accept

!! try prod exp_or_str=>{exp}

!! try prod exp=>{term_assign}{exp_assign}

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{id}{{push_id}}{id_suffix}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod id_suffix=>

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>{'>='}{term_cmp}{{@>=@}}{exp_cmp}
 terminator ---CURRENT _STACK TOP___ '>=' _CURRENT_NOW gequal accept

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{id}{{push_id}}{id_suffix}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod id_suffix=>{'.'}{id}{{@.@}}
 terminator ---CURRENT _STACK TOP___ '.' _CURRENT_NOW point accept
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {@.@}

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>
call func {@>=@}

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>

!! try prod exp_assign=>
call func {if_check}
 terminator ---CURRENT _STACK TOP___ ')' _CURRENT_NOW rparenthesis accept

!! try prod code=>{normal_stmt}

!! try prod normal_stmt=>{exp_or_str}{';'}{{pop_top}}

!! try prod exp_or_str=>{exp}

!! try prod exp=>{term_assign}{exp_assign}

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{id}{{push_id}}{id_suffix}
 terminator ---CURRENT _STACK TOP___ id _CURRENT_NOW identifier accept
call func {push_id}

!! try prod id_suffix=>

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>

!! try prod exp_assign=>{'='}{term_assign}{{@=@}}{exp_assign}
 terminator ---CURRENT _STACK TOP___ '=' _CURRENT_NOW assign accept

!! try prod term_assign=>{term_log_or}{exp_log_or}

!! try prod term_log_or=>{term_log_and}{exp_log_and}

!! try prod term_log_and=>{term_bit_or}{exp_bit_or}

!! try prod term_bit_or=>{term_bit_xor}{exp_bit_xor}

!! try prod term_bit_xor=>{term_bit_and}{exp_bit_and}

!! try prod term_bit_and=>{term_eq}{exp_eq}

!! try prod term_eq=>{term_cmp}{exp_cmp}

!! try prod term_cmp=>{term_shift}{exp_shift}

!! try prod term_shift=>{term_add}{exp_add}

!! try prod term_add=>{term_mul}{exp_mul}

!! try prod term_mul=>{term_prefix}

!! try prod term_prefix=>{term_suffix}

!! try prod term_suffix=>{factors}{inc_or_dec}

!! try prod factors=>{char_const}{{push_char}}
 terminator ---CURRENT _STACK TOP___ char_const _CURRENT_NOW char_literal accept
call func {push_char}

!! try prod inc_or_dec=>

!! try prod exp_mul=>

!! try prod exp_add=>

!! try prod exp_shift=>

!! try prod exp_cmp=>

!! try prod exp_eq=>

!! try prod exp_bit_and=>

!! try prod exp_bit_xor=>

!! try prod exp_bit_or=>

!! try prod exp_log_and=>

!! try prod exp_log_or=>
call func {@=@}

!! try prod exp_assign=>
 terminator ---CURRENT _STACK TOP___ ';' _CURRENT_NOW semicolon accept
call func {pop_top}
call func {if_end}

!! try prod else_stmt=>{'else'}{else_follow}{code}
 terminator ---CURRENT _STACK TOP___ 'else' _CURRENT_NOW tokelse accept

         reject [else_follow] with [tokif] - no possible way
!! try prod else_stmt=>
call func {else_end}

         reject [code_list] with [tokelse] - no possible way
        -- reject [else_stmt] with [tokelse] -- all productions tried
        -- reject [exp_assign] with [semicolon] -- all productions tried
        -- reject [exp_log_or] with [semicolon] -- all productions tried
        -- reject [exp_log_and] with [semicolon] -- all productions tried
        -- reject [exp_bit_or] with [semicolon] -- all productions tried
        -- reject [exp_bit_xor] with [semicolon] -- all productions tried
        -- reject [exp_bit_and] with [semicolon] -- all productions tried
        -- reject [exp_eq] with [semicolon] -- all productions tried
        -- reject [exp_cmp] with [semicolon] -- all productions tried
        -- reject [exp_shift] with [semicolon] -- all productions tried
        -- reject [exp_add] with [semicolon] -- all productions tried
        -- reject [exp_mul] with [semicolon] -- all productions tried
        -- reject [inc_or_dec] with [semicolon] -- all productions tried
        -- reject [factors] with [char_literal] -- all productions tried
        -- reject [term_suffix] with [char_literal] -- all productions tried
        -- reject [term_prefix] with [char_literal] -- all productions tried
        -- reject [term_mul] with [char_literal] -- all productions tried
        -- reject [term_add] with [char_literal] -- all productions tried
        -- reject [term_shift] with [char_literal] -- all productions tried
        -- reject [term_cmp] with [char_literal] -- all productions tried
        -- reject [term_eq] with [char_literal] -- all productions tried
        -- reject [term_bit_and] with [char_literal] -- all productions tried
        -- reject [term_bit_xor] with [char_literal] -- all productions tried
        -- reject [term_bit_or] with [char_literal] -- all productions tried
        -- reject [term_log_and] with [char_literal] -- all productions tried
        -- reject [term_log_or] with [char_literal] -- all productions tried
        -- reject [term_assign] with [char_literal] -- all productions tried
        -- reject [exp_assign] with [assign] -- all productions tried
        -- reject [exp_log_or] with [assign] -- all productions tried
        -- reject [exp_log_and] with [assign] -- all productions tried
        -- reject [exp_bit_or] with [assign] -- all productions tried
        -- reject [exp_bit_xor] with [assign] -- all productions tried
        -- reject [exp_bit_and] with [assign] -- all productions tried
        -- reject [exp_eq] with [assign] -- all productions tried
        -- reject [exp_cmp] with [assign] -- all productions tried
        -- reject [exp_shift] with [assign] -- all productions tried
        -- reject [exp_add] with [assign] -- all productions tried
        -- reject [exp_mul] with [assign] -- all productions tried
        -- reject [inc_or_dec] with [assign] -- all productions tried
        -- reject [id_suffix] with [assign] -- all productions tried
        -- reject [factors] with [identifier] -- all productions tried
        -- reject [term_suffix] with [identifier] -- all productions tried
        -- reject [term_prefix] with [identifier] -- all productions tried
        -- reject [term_mul] with [identifier] -- all productions tried
        -- reject [term_add] with [identifier] -- all productions tried
        -- reject [term_shift] with [identifier] -- all productions tried
        -- reject [term_cmp] with [identifier] -- all productions tried
        -- reject [term_eq] with [identifier] -- all productions tried
        -- reject [term_bit_and] with [identifier] -- all productions tried
        -- reject [term_bit_xor] with [identifier] -- all productions tried
        -- reject [term_bit_or] with [identifier] -- all productions tried
        -- reject [term_log_and] with [identifier] -- all productions tried
        -- reject [term_log_or] with [identifier] -- all productions tried
        -- reject [term_assign] with [identifier] -- all productions tried
        -- reject [exp] with [identifier] -- all productions tried
        -- reject [exp_or_str] with [identifier] -- all productions tried
        -- reject [normal_stmt] with [identifier] -- all productions tried
!! try prod code=>{branch_stmt}

         reject [branch_stmt] with [identifier] - no possible way
        -- reject [code] with [identifier] -- all productions tried
        -- reject [exp_assign] with [rparenthesis] -- all productions tried
        -- reject [exp_log_or] with [rparenthesis] -- all productions tried
        -- reject [exp_log_and] with [rparenthesis] -- all productions tried
        -- reject [exp_bit_or] with [rparenthesis] -- all productions tried
        -- reject [exp_bit_xor] with [rparenthesis] -- all productions tried
        -- reject [exp_bit_and] with [rparenthesis] -- all productions tried
        -- reject [exp_eq] with [rparenthesis] -- all productions tried
        -- reject [exp_cmp] with [rparenthesis] -- all productions tried
        -- reject [exp_shift] with [rparenthesis] -- all productions tried
        -- reject [exp_add] with [rparenthesis] -- all productions tried
        -- reject [exp_mul] with [rparenthesis] -- all productions tried
        -- reject [inc_or_dec] with [rparenthesis] -- all productions tried
        -- reject [id_suffix] with [point] -- all productions tried
        -- reject [factors] with [identifier] -- all productions tried
        -- reject [term_suffix] with [identifier] -- all productions tried
        -- reject [term_prefix] with [identifier] -- all productions tried
        -- reject [term_mul] with [identifier] -- all productions tried
        -- reject [term_add] with [identifier] -- all productions tried
        -- reject [term_shift] with [identifier] -- all productions tried
        -- reject [term_cmp] with [identifier] -- all productions tried
        -- reject [exp_cmp] with [gequal] -- all productions tried
        -- reject [exp_shift] with [gequal] -- all productions tried
        -- reject [exp_add] with [gequal] -- all productions tried
        -- reject [exp_mul] with [gequal] -- all productions tried
        -- reject [inc_or_dec] with [gequal] -- all productions tried
        -- reject [id_suffix] with [gequal] -- all productions tried
        -- reject [factors] with [identifier] -- all productions tried
        -- reject [term_suffix] with [identifier] -- all productions tried
        -- reject [term_prefix] with [identifier] -- all productions tried
        -- reject [term_mul] with [identifier] -- all productions tried
        -- reject [term_add] with [identifier] -- all productions tried
        -- reject [term_shift] with [identifier] -- all productions tried
        -- reject [term_cmp] with [identifier] -- all productions tried
        -- reject [term_eq] with [identifier] -- all productions tried
        -- reject [term_bit_and] with [identifier] -- all productions tried
        -- reject [term_bit_xor] with [identifier] -- all productions tried
        -- reject [term_bit_or] with [identifier] -- all productions tried
        -- reject [term_log_and] with [identifier] -- all productions tried
        -- reject [term_log_or] with [identifier] -- all productions tried
        -- reject [term_assign] with [identifier] -- all productions tried
        -- reject [exp] with [identifier] -- all productions tried
        -- reject [exp_or_str] with [identifier] -- all productions tried
        -- reject [if_stmt] with [tokif] -- all productions tried
        -- reject [branch_stmt] with [tokif] -- all productions tried
        -- reject [code] with [tokif] -- all productions tried
        -- reject [code_list] with [tokif] -- all productions tried
        -- reject [exp_assign] with [semicolon] -- all productions tried
        -- reject [exp_log_or] with [semicolon] -- all productions tried
        -- reject [exp_log_and] with [semicolon] -- all productions tried
        -- reject [exp_bit_or] with [semicolon] -- all productions tried
        -- reject [exp_bit_xor] with [semicolon] -- all productions tried
        -- reject [exp_bit_and] with [semicolon] -- all productions tried
        -- reject [exp_eq] with [semicolon] -- all productions tried
        -- reject [exp_cmp] with [semicolon] -- all productions tried
        -- reject [exp_shift] with [semicolon] -- all productions tried
        -- reject [exp_add] with [semicolon] -- all productions tried
        -- reject [exp_mul] with [semicolon] -- all productions tried
        -- reject [inc_or_dec] with [semicolon] -- all productions tried
        -- reject [factors] with [int_literal] -- all productions tried
        -- reject [term_suffix] with [int_literal] -- all productions tried
        -- reject [term_prefix] with [int_literal] -- all productions tried
        -- reject [term_mul] with [int_literal] -- all productions tried
        -- reject [term_add] with [int_literal] -- all productions tried
        -- reject [exp_add] with [add] -- all productions tried
        -- reject [exp_mul] with [add] -- all productions tried
        -- reject [inc_or_dec] with [add] -- all productions tried
        -- reject [call_param_follow] with [rparenthesis] -- all productions tried
        -- reject [exp_assign] with [rparenthesis] -- all productions tried
        -- reject [exp_log_or] with [rparenthesis] -- all productions tried
        -- reject [exp_log_and] with [rparenthesis] -- all productions tried
        -- reject [exp_bit_or] with [rparenthesis] -- all productions tried
        -- reject [exp_bit_xor] with [rparenthesis] -- all productions tried
        -- reject [exp_bit_and] with [rparenthesis] -- all productions tried
        -- reject [exp_eq] with [rparenthesis] -- all productions tried
        -- reject [exp_cmp] with [rparenthesis] -- all productions tried
        -- reject [exp_shift] with [rparenthesis] -- all productions tried
        -- reject [exp_add] with [rparenthesis] -- all productions tried
        -- reject [exp_mul] with [rparenthesis] -- all productions tried
        -- reject [inc_or_dec] with [rparenthesis] -- all productions tried
        -- reject [id_suffix] with [point] -- all productions tried
        -- reject [factors] with [identifier] -- all productions tried
        -- reject [term_suffix] with [identifier] -- all productions tried
        -- reject [term_prefix] with [identifier] -- all productions tried
        -- reject [term_mul] with [identifier] -- all productions tried
        -- reject [term_add] with [identifier] -- all productions tried
        -- reject [term_shift] with [identifier] -- all productions tried
        -- reject [term_cmp] with [identifier] -- all productions tried
        -- reject [term_eq] with [identifier] -- all productions tried
        -- reject [term_bit_and] with [identifier] -- all productions tried
        -- reject [term_bit_xor] with [identifier] -- all productions tried
        -- reject [term_bit_or] with [identifier] -- all productions tried
        -- reject [term_log_and] with [identifier] -- all productions tried
        -- reject [term_log_or] with [identifier] -- all productions tried
        -- reject [term_assign] with [identifier] -- all productions tried
        -- reject [exp] with [identifier] -- all productions tried
        -- reject [exp_or_str] with [identifier] -- all productions tried
        -- reject [call_param_follow] with [comma] -- all productions tried
        -- reject [exp_assign] with [comma] -- all productions tried
        -- reject [exp_log_or] with [comma] -- all productions tried
        -- reject [exp_log_and] with [comma] -- all productions tried
        -- reject [exp_bit_or] with [comma] -- all productions tried
        -- reject [exp_bit_xor] with [comma] -- all productions tried
        -- reject [exp_bit_and] with [comma] -- all productions tried
        -- reject [exp_eq] with [comma] -- all productions tried
        -- reject [exp_cmp] with [comma] -- all productions tried
        -- reject [exp_shift] with [comma] -- all productions tried
        -- reject [exp_add] with [comma] -- all productions tried
        -- reject [exp_mul] with [comma] -- all productions tried
        -- reject [inc_or_dec] with [comma] -- all productions tried
        -- reject [id_suffix] with [point] -- all productions tried
        -- reject [factors] with [identifier] -- all productions tried
        -- reject [term_suffix] with [identifier] -- all productions tried
        -- reject [term_prefix] with [identifier] -- all productions tried
        -- reject [term_mul] with [identifier] -- all productions tried
        -- reject [term_add] with [identifier] -- all productions tried
        -- reject [term_shift] with [identifier] -- all productions tried
        -- reject [term_cmp] with [identifier] -- all productions tried
        -- reject [term_eq] with [identifier] -- all productions tried
        -- reject [term_bit_and] with [identifier] -- all productions tried
        -- reject [term_bit_xor] with [identifier] -- all productions tried
        -- reject [term_bit_or] with [identifier] -- all productions tried
        -- reject [term_log_and] with [identifier] -- all productions tried
        -- reject [term_log_or] with [identifier] -- all productions tried
        -- reject [term_assign] with [identifier] -- all productions tried
        -- reject [exp] with [identifier] -- all productions tried
        -- reject [exp_or_str] with [identifier] -- all productions tried
        -- reject [call_param_list] with [identifier] -- all productions tried
        -- reject [call_params] with [identifier] -- all productions tried
        -- reject [call_func] with [lparenthesis] -- all productions tried
        -- reject [id_suffix] with [lparenthesis] -- all productions tried
        -- reject [factors] with [identifier] -- all productions tried
        -- reject [term_suffix] with [identifier] -- all productions tried
        -- reject [term_prefix] with [identifier] -- all productions tried
        -- reject [term_mul] with [identifier] -- all productions tried
        -- reject [term_add] with [identifier] -- all productions tried
        -- reject [term_shift] with [identifier] -- all productions tried
        -- reject [term_cmp] with [identifier] -- all productions tried
        -- reject [term_eq] with [identifier] -- all productions tried
        -- reject [term_bit_and] with [identifier] -- all productions tried
        -- reject [term_bit_xor] with [identifier] -- all productions tried
        -- reject [term_bit_or] with [identifier] -- all productions tried
        -- reject [term_log_and] with [identifier] -- all productions tried
        -- reject [term_log_or] with [identifier] -- all productions tried
        -- reject [term_assign] with [identifier] -- all productions tried
        -- reject [exp_assign] with [assign] -- all productions tried
        -- reject [exp_log_or] with [assign] -- all productions tried
        -- reject [exp_log_and] with [assign] -- all productions tried
        -- reject [exp_bit_or] with [assign] -- all productions tried
        -- reject [exp_bit_xor] with [assign] -- all productions tried
        -- reject [exp_bit_and] with [assign] -- all productions tried
        -- reject [exp_eq] with [assign] -- all productions tried
        -- reject [exp_cmp] with [assign] -- all productions tried
        -- reject [exp_shift] with [assign] -- all productions tried
        -- reject [exp_add] with [assign] -- all productions tried
        -- reject [exp_mul] with [assign] -- all productions tried
        -- reject [inc_or_dec] with [assign] -- all productions tried
        -- reject [id_suffix] with [point] -- all productions tried
        -- reject [factors] with [identifier] -- all productions tried
        -- reject [term_suffix] with [identifier] -- all productions tried
        -- reject [term_prefix] with [identifier] -- all productions tried
        -- reject [term_mul] with [identifier] -- all productions tried
        -- reject [term_add] with [identifier] -- all productions tried
        -- reject [term_shift] with [identifier] -- all productions tried
        -- reject [term_cmp] with [identifier] -- all productions tried
        -- reject [term_eq] with [identifier] -- all productions tried
        -- reject [term_bit_and] with [identifier] -- all productions tried
        -- reject [term_bit_xor] with [identifier] -- all productions tried
        -- reject [term_bit_or] with [identifier] -- all productions tried
        -- reject [term_log_and] with [identifier] -- all productions tried
        -- reject [term_log_or] with [identifier] -- all productions tried
        -- reject [term_assign] with [identifier] -- all productions tried
        -- reject [exp] with [identifier] -- all productions tried
        -- reject [exp_or_str] with [identifier] -- all productions tried
        -- reject [normal_stmt] with [identifier] -- all productions tried
!! try prod code=>{branch_stmt}

         reject [branch_stmt] with [identifier] - no possible way
        -- reject [code] with [identifier] -- all productions tried
        -- reject [code_list] with [identifier] -- all productions tried
        -- reject [exp_assign] with [semicolon] -- all productions tried
        -- reject [exp_log_or] with [semicolon] -- all productions tried
        -- reject [exp_log_and] with [semicolon] -- all productions tried
        -- reject [exp_bit_or] with [semicolon] -- all productions tried
        -- reject [exp_bit_xor] with [semicolon] -- all productions tried
        -- reject [exp_bit_and] with [semicolon] -- all productions tried
        -- reject [exp_eq] with [semicolon] -- all productions tried
        -- reject [exp_cmp] with [semicolon] -- all productions tried
        -- reject [exp_shift] with [semicolon] -- all productions tried
        -- reject [exp_add] with [semicolon] -- all productions tried
        -- reject [exp_mul] with [semicolon] -- all productions tried
        -- reject [inc_or_dec] with [semicolon] -- all productions tried
        -- reject [factors] with [int_literal] -- all productions tried
        -- reject [term_suffix] with [int_literal] -- all productions tried
        -- reject [term_prefix] with [int_literal] -- all productions tried
        -- reject [term_mul] with [int_literal] -- all productions tried
        -- reject [term_add] with [int_literal] -- all productions tried
        -- reject [term_shift] with [int_literal] -- all productions tried
        -- reject [term_cmp] with [int_literal] -- all productions tried
        -- reject [term_eq] with [int_literal] -- all productions tried
        -- reject [term_bit_and] with [int_literal] -- all productions tried
        -- reject [term_bit_xor] with [int_literal] -- all productions tried
        -- reject [term_bit_or] with [int_literal] -- all productions tried
        -- reject [term_log_and] with [int_literal] -- all productions tried
        -- reject [term_log_or] with [int_literal] -- all productions tried
        -- reject [term_assign] with [int_literal] -- all productions tried
        -- reject [exp_assign] with [assign] -- all productions tried
        -- reject [exp_log_or] with [assign] -- all productions tried
        -- reject [exp_log_and] with [assign] -- all productions tried
        -- reject [exp_bit_or] with [assign] -- all productions tried
        -- reject [exp_bit_xor] with [assign] -- all productions tried
        -- reject [exp_bit_and] with [assign] -- all productions tried
        -- reject [exp_eq] with [assign] -- all productions tried
        -- reject [exp_cmp] with [assign] -- all productions tried
        -- reject [exp_shift] with [assign] -- all productions tried
        -- reject [exp_add] with [assign] -- all productions tried
        -- reject [exp_mul] with [assign] -- all productions tried
        -- reject [inc_or_dec] with [assign] -- all productions tried
        -- reject [id_suffix] with [point] -- all productions tried
        -- reject [factors] with [identifier] -- all productions tried
        -- reject [term_suffix] with [identifier] -- all productions tried
        -- reject [term_prefix] with [identifier] -- all productions tried
        -- reject [term_mul] with [identifier] -- all productions tried
        -- reject [term_add] with [identifier] -- all productions tried
        -- reject [term_shift] with [identifier] -- all productions tried
        -- reject [term_cmp] with [identifier] -- all productions tried
        -- reject [term_eq] with [identifier] -- all productions tried
        -- reject [term_bit_and] with [identifier] -- all productions tried
        -- reject [term_bit_xor] with [identifier] -- all productions tried
        -- reject [term_bit_or] with [identifier] -- all productions tried
        -- reject [term_log_and] with [identifier] -- all productions tried
        -- reject [term_log_or] with [identifier] -- all productions tried
        -- reject [term_assign] with [identifier] -- all productions tried
        -- reject [exp] with [identifier] -- all productions tried
        -- reject [exp_or_str] with [identifier] -- all productions tried
        -- reject [normal_stmt] with [identifier] -- all productions tried
!! try prod code=>{branch_stmt}

         reject [branch_stmt] with [identifier] - no possible way
        -- reject [code] with [identifier] -- all productions tried
        -- reject [code_list] with [identifier] -- all productions tried
!! try prod def_list=>{var_def}{def_list}

!! try prod var_def=>{type_spec}{var_def_list}

!! try prod type_spec=>{int_type}

         reject [int_type] with [identifier] - no possible way
        -- reject [type_spec] with [identifier] -- all productions tried
        -- reject [var_def] with [identifier] -- all productions tried
        -- reject [def_list] with [identifier] -- all productions tried
        -- reject [var_def_list_follow] with [semicolon] -- all productions tried
        -- reject [var_def_follow] with [semicolon] -- all productions tried
        -- reject [var_def_list] with [identifier] -- all productions tried
        -- reject [type_spec] with [tokstruct] -- all productions tried
        -- reject [var_def] with [tokstruct] -- all productions tried
        -- reject [def_list] with [tokstruct] -- all productions tried
        -- reject [var_def_list_follow] with [semicolon] -- all productions tried
        -- reject [exp_assign] with [semicolon] -- all productions tried
        -- reject [exp_log_or] with [semicolon] -- all productions tried
        -- reject [exp_log_and] with [semicolon] -- all productions tried
        -- reject [exp_bit_or] with [semicolon] -- all productions tried
        -- reject [exp_bit_xor] with [semicolon] -- all productions tried
        -- reject [exp_bit_and] with [semicolon] -- all productions tried
        -- reject [exp_eq] with [semicolon] -- all productions tried
        -- reject [exp_cmp] with [semicolon] -- all productions tried
        -- reject [exp_shift] with [semicolon] -- all productions tried
        -- reject [exp_add] with [semicolon] -- all productions tried
        -- reject [exp_mul] with [semicolon] -- all productions tried
        -- reject [inc_or_dec] with [semicolon] -- all productions tried
        -- reject [factors] with [int_literal] -- all productions tried
        -- reject [term_suffix] with [int_literal] -- all productions tried
        -- reject [term_prefix] with [int_literal] -- all productions tried
        -- reject [term_mul] with [int_literal] -- all productions tried
        -- reject [term_add] with [int_literal] -- all productions tried
        -- reject [term_shift] with [int_literal] -- all productions tried
        -- reject [term_cmp] with [int_literal] -- all productions tried
        -- reject [term_eq] with [int_literal] -- all productions tried
        -- reject [term_bit_and] with [int_literal] -- all productions tried
        -- reject [term_bit_xor] with [int_literal] -- all productions tried
        -- reject [term_bit_or] with [int_literal] -- all productions tried
        -- reject [term_log_and] with [int_literal] -- all productions tried
        -- reject [term_log_or] with [int_literal] -- all productions tried
        -- reject [term_assign] with [int_literal] -- all productions tried
        -- reject [exp] with [int_literal] -- all productions tried
        -- reject [var_def_follow] with [assign] -- all productions tried
        -- reject [var_def_list_follow] with [comma] -- all productions tried
        -- reject [var_def_follow] with [comma] -- all productions tried
        -- reject [var_def_list_follow] with [comma] -- all productions tried
        -- reject [exp_assign] with [comma] -- all productions tried
        -- reject [exp_log_or] with [comma] -- all productions tried
        -- reject [exp_log_and] with [comma] -- all productions tried
        -- reject [exp_bit_or] with [comma] -- all productions tried
        -- reject [exp_bit_xor] with [comma] -- all productions tried
        -- reject [exp_bit_and] with [comma] -- all productions tried
        -- reject [exp_eq] with [comma] -- all productions tried
        -- reject [exp_cmp] with [comma] -- all productions tried
        -- reject [exp_shift] with [comma] -- all productions tried
        -- reject [exp_add] with [comma] -- all productions tried
        -- reject [exp_mul] with [comma] -- all productions tried
        -- reject [inc_or_dec] with [comma] -- all productions tried
        -- reject [factors] with [int_literal] -- all productions tried
        -- reject [term_suffix] with [int_literal] -- all productions tried
        -- reject [term_prefix] with [int_literal] -- all productions tried
        -- reject [term_mul] with [int_literal] -- all productions tried
        -- reject [term_add] with [int_literal] -- all productions tried
        -- reject [term_shift] with [int_literal] -- all productions tried
        -- reject [term_cmp] with [int_literal] -- all productions tried
        -- reject [term_eq] with [int_literal] -- all productions tried
        -- reject [term_bit_and] with [int_literal] -- all productions tried
        -- reject [term_bit_xor] with [int_literal] -- all productions tried
        -- reject [term_bit_or] with [int_literal] -- all productions tried
        -- reject [term_log_and] with [int_literal] -- all productions tried
        -- reject [term_log_or] with [int_literal] -- all productions tried
        -- reject [term_assign] with [int_literal] -- all productions tried
        -- reject [exp] with [int_literal] -- all productions tried
        -- reject [var_def_follow] with [assign] -- all productions tried
        -- reject [var_def_list] with [identifier] -- all productions tried
        -- reject [int32_type] with [tokint] -- all productions tried
        -- reject [int_type] with [tokint] -- all productions tried
        -- reject [type_spec] with [tokint] -- all productions tried
        -- reject [var_def] with [tokint] -- all productions tried
        -- reject [def_list] with [tokint] -- all productions tried
        -- reject [var_def_list_follow] with [semicolon] -- all productions tried
        -- reject [var_def_follow] with [semicolon] -- all productions tried
        -- reject [var_def_list] with [identifier] -- all productions tried
        -- reject [int32_type] with [tokint] -- all productions tried
        -- reject [int_type] with [tokint] -- all productions tried
        -- reject [type_spec] with [tokint] -- all productions tried
        -- reject [var_def] with [tokint] -- all productions tried
        -- reject [def_list] with [tokint] -- all productions tried
        -- reject [code_block] with [lbrace] -- all productions tried
        -- reject [func_follow] with [lbrace] -- all productions tried
        -- reject [params] with [rparenthesis] -- all productions tried
        -- reject [var_or_func] with [lparenthesis] -- all productions tried
        -- reject [int32_type] with [tokint] -- all productions tried
        -- reject [int_type] with [tokint] -- all productions tried
        -- reject [type_spec] with [tokint] -- all productions tried
        -- reject [decl] with [tokint] -- all productions tried
        -- reject [decl_list] with [tokint] -- all productions tried
        -- reject [var_def_list_follow] with [semicolon] -- all productions tried
        -- reject [var_def_follow] with [semicolon] -- all productions tried
        -- reject [var_or_func] with [semicolon] -- all productions tried
        -- reject [int32_type] with [tokint] -- all productions tried
        -- reject [int_type] with [tokint] -- all productions tried
        -- reject [type_spec] with [tokint] -- all productions tried
        -- reject [decl] with [tokint] -- all productions tried
        -- reject [decl_list] with [tokint] -- all productions tried
!! try prod code_list=>{code}{code_list}

!! try prod code=>{normal_stmt}

         reject [normal_stmt] with [rbrace] - no possible way
!! try prod code=>{branch_stmt}

         reject [branch_stmt] with [rbrace] - no possible way
        -- reject [code] with [rbrace] -- all productions tried
        -- reject [code_list] with [rbrace] -- all productions tried
        -- reject [exp_assign] with [semicolon] -- all productions tried
        -- reject [exp_log_or] with [semicolon] -- all productions tried
        -- reject [exp_log_and] with [semicolon] -- all productions tried
        -- reject [exp_bit_or] with [semicolon] -- all productions tried
        -- reject [exp_bit_xor] with [semicolon] -- all productions tried
        -- reject [exp_bit_and] with [semicolon] -- all productions tried
        -- reject [exp_eq] with [semicolon] -- all productions tried
        -- reject [exp_cmp] with [semicolon] -- all productions tried
        -- reject [exp_shift] with [semicolon] -- all productions tried
        -- reject [exp_add] with [semicolon] -- all productions tried
        -- reject [exp_mul] with [semicolon] -- all productions tried
        -- reject [inc_or_dec] with [semicolon] -- all productions tried
        -- reject [exp_assign] with [rbracket] -- all productions tried
        -- reject [exp_log_or] with [rbracket] -- all productions tried
        -- reject [exp_log_and] with [rbracket] -- all productions tried
        -- reject [exp_bit_or] with [rbracket] -- all productions tried
        -- reject [exp_bit_xor] with [rbracket] -- all productions tried
        -- reject [exp_bit_and] with [rbracket] -- all productions tried
        -- reject [exp_eq] with [rbracket] -- all productions tried
        -- reject [exp_cmp] with [rbracket] -- all productions tried
        -- reject [exp_shift] with [rbracket] -- all productions tried
        -- reject [exp_add] with [rbracket] -- all productions tried
        -- reject [exp_mul] with [rbracket] -- all productions tried
        -- reject [inc_or_dec] with [rbracket] -- all productions tried
        -- reject [id_suffix] with [rbracket] -- all productions tried
        -- reject [factors] with [identifier] -- all productions tried
        -- reject [term_suffix] with [identifier] -- all productions tried
        -- reject [term_prefix] with [identifier] -- all productions tried
        -- reject [term_mul] with [identifier] -- all productions tried
        -- reject [term_add] with [identifier] -- all productions tried
        -- reject [term_shift] with [identifier] -- all productions tried
        -- reject [term_cmp] with [identifier] -- all productions tried
        -- reject [term_eq] with [identifier] -- all productions tried
        -- reject [term_bit_and] with [identifier] -- all productions tried
        -- reject [term_bit_xor] with [identifier] -- all productions tried
        -- reject [term_bit_or] with [identifier] -- all productions tried
        -- reject [term_log_and] with [identifier] -- all productions tried
        -- reject [term_log_or] with [identifier] -- all productions tried
        -- reject [term_assign] with [identifier] -- all productions tried
        -- reject [exp] with [identifier] -- all productions tried
        -- reject [id_suffix] with [lbracket] -- all productions tried
        -- reject [factors] with [identifier] -- all productions tried
        -- reject [term_suffix] with [identifier] -- all productions tried
        -- reject [term_prefix] with [identifier] -- all productions tried
        -- reject [term_mul] with [identifier] -- all productions tried
        -- reject [term_add] with [identifier] -- all productions tried
        -- reject [term_shift] with [identifier] -- all productions tried
        -- reject [term_cmp] with [identifier] -- all productions tried
        -- reject [term_eq] with [identifier] -- all productions tried
        -- reject [term_bit_and] with [identifier] -- all productions tried
        -- reject [term_bit_xor] with [identifier] -- all productions tried
        -- reject [term_bit_or] with [identifier] -- all productions tried
        -- reject [term_log_and] with [identifier] -- all productions tried
        -- reject [term_log_or] with [identifier] -- all productions tried
        -- reject [term_assign] with [identifier] -- all productions tried
        -- reject [exp] with [identifier] -- all productions tried
        -- reject [exp_or_str] with [identifier] -- all productions tried
        -- reject [return_follow] with [identifier] -- all productions tried
        -- reject [return_stmt] with [tokreturn] -- all productions tried
        -- reject [code] with [tokreturn] -- all productions tried
        -- reject [code_list] with [tokreturn] -- all productions tried
!! try prod def_list=>{var_def}{def_list}

         reject [var_def] with [tokreturn] - no possible way
        -- reject [def_list] with [tokreturn] -- all productions tried
        -- reject [code_block] with [lbrace] -- all productions tried
        -- reject [func_follow] with [lbrace] -- all productions tried
        -- reject [param_follow] with [rparenthesis] -- all productions tried
        -- reject [param_suffix] with [lbracket] -- all productions tried
        -- reject [char_type] with [tokchar] -- all productions tried
        -- reject [type_spec] with [tokchar] -- all productions tried
        -- reject [param] with [tokchar] -- all productions tried
        -- reject [param_follow] with [comma] -- all productions tried
        -- reject [param_suffix] with [comma] -- all productions tried
        -- reject [int32_type] with [tokint] -- all productions tried
        -- reject [int_type] with [tokint] -- all productions tried
        -- reject [type_spec] with [tokint] -- all productions tried
        -- reject [param] with [tokint] -- all productions tried
        -- reject [param_list] with [tokint] -- all productions tried
        -- reject [params] with [tokint] -- all productions tried
        -- reject [var_or_func] with [lparenthesis] -- all productions tried
        -- reject [int32_type] with [tokint] -- all productions tried
        -- reject [int_type] with [tokint] -- all productions tried
        -- reject [type_spec] with [tokint] -- all productions tried
        -- reject [decl] with [tokint] -- all productions tried
        -- reject [decl_list] with [tokint] -- all productions tried
        -- reject [program] with [tokint] -- all productions tried
DONE
